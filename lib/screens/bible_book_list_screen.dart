import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:google_fonts/google_fonts.dart';
import '../models/pagination_state.dart';

final List<String> oldTestamentBooksOrdered = [
  'Genesis','Exodus','Leviticus','Numbers','Deuteronomy',
  'Joshua','Judges','Ruth','1 Samuel','2 Samuel','1 Kings','2 Kings',
  '1 Chronicles','2 Chronicles','Ezra','Nehemiah','Esther','Job',
  'Psalms','Proverbs','Ecclesiastes','Song of Solomon','Isaiah','Jeremiah',
  'Lamentations','Ezekiel','Daniel','Hosea','Joel','Amos','Obadiah',
  'Jonah','Micah','Nahum','Habakkuk','Zephaniah','Haggai','Zechariah','Malachi'
];

final List<String> newTestamentBooksOrdered = [
  'Matthew','Mark','Luke','John','Acts',
  'Romans','1 Corinthians','2 Corinthians','Galatians','Ephesians',
  'Philippians','Colossians','1 Thessalonians','2 Thessalonians','1 Timothy',
  '2 Timothy','Titus','Philemon','Hebrews','James','1 Peter','2 Peter',
  '1 John','2 John','3 John','Jude','Revelation'
];
final Map<String, String> hindiBookNames = {
  'Genesis': '‡§â‡§§‡•ç‡§™‡§§‡•ç‡§§‡§ø',
  'Exodus': '‡§®‡§ø‡§∞‡•ç‡§ó‡§Æ‡§®',
  'Leviticus': '‡§≤‡•à‡§µ‡•ç‡§Ø‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ',
  'Numbers': '‡§ó‡§ø‡§®‡§§‡•Ä',
  'Deuteronomy': '‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§µ‡§ø‡§µ‡§∞‡§£',
  'Joshua': '‡§Ø‡§π‡•ã‡§∂‡•Ç',
  'Judges': '‡§®‡•ç‡§Ø‡§æ‡§Ø‡§ø‡§Ø‡•ã‡§Ç',
  'Ruth': '‡§∞‡•Ç‡§§',
  '1 Samuel': '1 ‡§∂‡§Æ‡•Ç‡§è‡§≤',
  '2 Samuel': '2 ‡§∂‡§Æ‡•Ç‡§è‡§≤',
  '1 Kings': '1 ‡§∞‡§æ‡§ú‡§æ',
  '2 Kings': '2 ‡§∞‡§æ‡§ú‡§æ',
  '1 Chronicles': '1 ‡§á‡§§‡§ø‡§π‡§æ‡§∏',
  '2 Chronicles': '2 ‡§á‡§§‡§ø‡§π‡§æ‡§∏',
  'Ezra': '‡§è‡§ú‡•ç‡§∞‡§æ',
  'Nehemiah': '‡§®‡§π‡•á‡§Æ‡§æ‡§Ø‡§æ‡§π',
  'Esther': '‡§è‡§∏‡•ç‡§§‡•á‡§∞',
  'Job': '‡§Ö‡§Ø‡•ç‡§Ø‡•Ç‡§¨',
  'Psalms': '‡§≠‡§ú‡§® ‡§∏‡§Ç‡§π‡§ø‡§§‡§æ',
  'Proverbs': '‡§®‡•Ä‡§§‡§ø‡§µ‡§ö‡§®',
  'Ecclesiastes': '‡§∏‡§≠‡•ã‡§™‡§¶‡•á‡§∂‡§ï',
  'Song of Solomon': '‡§∂‡•ç‡§∞‡•á‡§∑‡•ç‡§†‡§ó‡•Ä‡§§',
  'Isaiah': '‡§Ø‡§∂‡§æ‡§Ø‡§æ‡§π',
  'Jeremiah': '‡§Ø‡§ø‡§∞‡•ç‡§Æ‡§Ø‡§æ‡§π',
  'Lamentations': '‡§µ‡§ø‡§≤‡§æ‡§™‡§ó‡•Ä‡§§',
  'Ezekiel': '‡§Ø‡§π‡•á‡§ú‡§ï‡•á‡§≤',
  'Daniel': '‡§¶‡§æ‡§®‡§ø‡§Ø‡•ç‡§Ø‡•á‡§≤',
  'Hosea': '‡§π‡•ã‡§∂‡•á',
  'Joel': '‡§Ø‡•ã‡§è‡§≤',
  'Amos': '‡§Ü‡§Æ‡•ã‡§∏',
  'Obadiah': '‡§ì‡§¨‡§¶‡•ç‡§Ø‡§æ‡§π',
  'Jonah': '‡§Ø‡•ã‡§®‡§æ',
  'Micah': '‡§Æ‡•Ä‡§ï‡§æ',
  'Nahum': '‡§®‡§π‡•Ç‡§Æ',
  'Habakkuk': '‡§π‡§¨‡§ï‡•ç‡§ï‡•Ç‡§ï',
  'Zephaniah': '‡§∏‡§™‡§®‡•ç‡§Ø‡§æ‡§π',
  'Haggai': '‡§π‡§æ‡§ó‡•ç‡§ó‡•à',
  'Zechariah': '‡§ú‡§ï‡§∞‡•ç‡§Ø‡§æ‡§π',
  'Malachi': '‡§Æ‡§≤‡§æ‡§ï‡•Ä',
  'Matthew': '‡§Æ‡§§‡•ç‡§§‡•Ä',
  'Mark': '‡§Æ‡§∞‡§ï‡•Å‡§∏',
  'Luke': '‡§≤‡•Ç‡§ï‡§æ',
  'John': '‡§Ø‡•Ç‡§π‡§®‡•ç‡§®‡§æ',
  'Acts': '‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§‡•ã‡§Ç ‡§ï‡•á ‡§ï‡§æ‡§Æ',
  'Romans': '‡§∞‡•ã‡§Æ‡§ø‡§Ø‡•ã‡§Ç',
  '1 Corinthians': '1 ‡§ï‡•Å‡§∞‡§ø‡§®‡•ç‡§•‡§ø‡§Ø‡•ã‡§Ç',
  '2 Corinthians': '2 ‡§ï‡•Å‡§∞‡§ø‡§®‡•ç‡§•‡§ø‡§Ø‡•ã‡§Ç',
  'Galatians': '‡§ó‡§≤‡§æ‡§§‡§ø‡§Ø‡•ã‡§Ç',
  'Ephesians': '‡§á‡§´‡§ø‡§∏‡§ø‡§Ø‡•ã‡§Ç',
  'Philippians': '‡§´‡§ø‡§≤‡§ø‡§™‡•ç‡§™‡§ø‡§Ø‡•ã‡§Ç',
  'Colossians': '‡§ï‡•Å‡§≤‡•Å‡§∏‡•ç‡§∏‡§ø‡§Ø‡•ã‡§Ç',
  '1 Thessalonians': '1 ‡§•‡§ø‡§∏‡•ç‡§∏‡§≤‡•Å‡§®‡•Ä‡§ï‡§ø‡§Ø‡•ã‡§Ç',
  '2 Thessalonians': '2 ‡§•‡§ø‡§∏‡•ç‡§∏‡§≤‡•Å‡§®‡•Ä‡§ï‡§ø‡§Ø‡•ã‡§Ç',
  '1 Timothy': '1 ‡§§‡•Ä‡§Æ‡•Å‡§•‡§ø‡§Ø‡•Å‡§∏',
  '2 Timothy': '2 ‡§§‡•Ä‡§Æ‡•Å‡§•‡§ø‡§Ø‡•Å‡§∏',
  'Titus': '‡§§‡•Ä‡§§‡•Å‡§∏',
  'Philemon': '‡§´‡§ø‡§≤‡•á‡§Æ‡•ã‡§®',
  'Hebrews': '‡§á‡§¨‡•ç‡§∞‡§æ‡§®‡§ø‡§Ø‡•ã‡§Ç',
  'James': '‡§Ø‡§æ‡§ï‡•Ç‡§¨',
  '1 Peter': '1 ‡§™‡§§‡§∞‡§∏',
  '2 Peter': '2 ‡§™‡§§‡§∞‡§∏',
  '1 John': '1 ‡§Ø‡•Ç‡§π‡§®‡•ç‡§®‡§æ',
  '2 John': '2 ‡§Ø‡•Ç‡§π‡§®‡•ç‡§®‡§æ',
  '3 John': '3 ‡§Ø‡•Ç‡§π‡§®‡•ç‡§®‡§æ',
  'Jude': '‡§Ø‡§π‡•Ç‡§¶‡§æ',
  'Revelation': '‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§ø‡§§‡§µ‡§æ‡§ï‡•ç‡§Ø',
};

final Map<String, String> odiaBookNames = {
  'Genesis': '‡¨Ü‡¨¶‡¨ø‡¨™‡≠Å‡¨∏‡≠ç‡¨§‡¨ï',
  'Exodus': '‡¨®‡¨ø‡¨∞‡≠ç‡¨ó‡¨Æ‡¨®',
  'Leviticus': '‡¨≤‡≠á‡¨¨‡≠Ä‡≠ü',
  'Numbers': '‡¨ó‡¨£‡¨®‡¨æ',
  'Deuteronomy': '‡¨¶‡≠ç‡¨¨‡¨ø‡¨§‡≠Ä‡≠ü ‡¨¨‡¨ø‡¨¨‡¨∞‡¨£',
  'Joshua': '‡¨Ø‡¨ø‡¨π‡≠ã‡¨∂‡≠Ç‡≠ü',
  'Judges': '‡¨¨‡¨ø‡¨ö‡¨æ‡¨∞‡¨ï‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨æ',
  'Ruth': '‡¨∞‡≠Ç‡¨§',
  '1 Samuel': '‡≠ß ‡¨∂‡¨æ‡¨Æ‡≠Å‡≠ü‡≠á‡¨≤',
  '2 Samuel': '‡≠® ‡¨∂‡¨æ‡¨Æ‡≠Å‡≠ü‡≠á‡¨≤',
  '1 Kings': '‡≠ß ‡¨∞‡¨æ‡¨ú‡¨æ‡¨¨‡¨≥‡≠Ä',
  '2 Kings': '‡≠® ‡¨∞‡¨æ‡¨ú‡¨æ‡¨¨‡¨≥‡≠Ä',
  '1 Chronicles': '‡≠ß ‡¨¨‡¨Ç‡¨∂‡¨æ‡¨¨‡¨≥‡≠Ä',
  '2 Chronicles': '‡≠® ‡¨¨‡¨Ç‡¨∂‡¨æ‡¨¨‡¨≥‡≠Ä',
  'Ezra': '‡¨è‡¨ú‡≠ç‡¨∞‡¨æ',
  'Nehemiah': '‡¨®‡¨ø‡¨π‡¨ø‡¨Æ‡≠Ä‡≠ü‡¨æ',
  'Esther': '‡¨è‡¨∑‡≠ç‡¨ü‡¨∞',
  'Job': '‡¨Ø‡≠Ä‡¨∂‡≠Å',
  'Psalms': '‡¨ó‡≠Ä‡¨§‡¨∏‡¨Ç‡¨π‡¨ø‡¨§‡¨æ',
  'Proverbs': '‡¨π‡¨ø‡¨§‡≠ã‡¨™‡¨¶‡≠á‡¨∂',
  'Ecclesiastes': '‡¨â‡¨™‡¨¶‡≠á‡¨∂‡¨ï',
  'Song of Solomon': '‡¨™‡¨∞‡¨Æ‡¨ó‡≠Ä‡¨§',
  'Isaiah': '‡¨Ø‡¨ø‡¨∂‡¨æ‡¨á‡≠ü',
  'Jeremiah': '‡¨Ø‡¨ø‡¨∞‡¨ø‡¨Æ‡≠Ä‡≠ü',
  'Lamentations': '‡¨¨‡¨ø‡¨≥‡¨æ‡¨™',
  'Ezekiel': '‡¨Ø‡¨ø‡¨π‡¨ø‡¨ú‡¨ï‡≠á‡¨≤',
  'Daniel': '‡¨¶‡¨æ‡¨®‡¨ø‡≠ü‡≠á‡¨≤',
  'Hosea': '‡¨π‡≠ã‡¨∂‡≠á‡≠ü',
  'Joel': '‡¨Ø‡≠ã‡≠ü‡≠á‡¨≤',
  'Amos': '‡¨Ü‡¨Æ‡≠ã‡¨∏',
  'Obadiah': '‡¨ì‡¨¨‡¨¶‡≠Ä‡≠ü',
  'Jonah': '‡¨Ø‡≠Ç‡¨®‡¨∏',
  'Micah': '‡¨Æ‡≠Ä‡¨ñ‡¨æ',
  'Nahum': '‡¨®‡¨π‡≠Ç‡¨Æ',
  'Habakkuk': '‡¨π‡¨¨‡¨ï‡≠ç‡¨ï‡≠Ç‡¨ï',
  'Zephaniah': '‡¨∏‡¨´‡¨®‡≠Ä‡≠ü',
  'Haggai': '‡¨π‡¨æ‡¨ó‡≠ç‡¨ó‡≠ü',
  'Zechariah': '‡¨ú‡¨ø‡¨ñ‡¨∞‡≠Ä‡≠ü',
  'Malachi': '‡¨Æ‡¨æ‡¨≤‡¨æ‡¨ñ‡≠Ä',
  'Matthew': '‡¨Æ‡¨•‡¨ø',
  'Mark': '‡¨Æ‡¨æ‡¨∞‡≠ç‡¨ï',
  'Luke': '‡¨≤‡≠Ç‡¨ï',
  'John': '‡¨Ø‡≠ã‡¨π‡¨®',
  'Acts': '‡¨™‡≠ç‡¨∞‡≠á‡¨∞‡¨ø‡¨§',
  'Romans': '‡¨∞‡≠ã‡¨Æ‡≠Ä‡≠ü',
  '1 Corinthians': '‡≠ß ‡¨ï‡¨∞‡¨ø‡¨®‡≠ç‡¨•‡≠Ä‡≠ü',
  '2 Corinthians': '‡≠® ‡¨ï‡¨∞‡¨ø‡¨®‡≠ç‡¨•‡≠Ä‡≠ü',
  'Galatians': '‡¨ó‡¨æ‡¨≤‡¨æ‡¨§‡≠Ä‡≠ü',
  'Ephesians': '‡¨è‡¨´‡¨ø‡¨∏‡≠Ä‡≠ü',
  'Philippians': '‡¨´‡¨ø‡¨≤‡¨ø‡¨™‡≠ç‡¨™‡≠Ä‡≠ü',
  'Colossians': '‡¨ï‡¨≤‡¨∏‡≠Ä‡≠ü',
  '1 Thessalonians': '‡≠ß ‡¨•‡≠á‡¨∏‡¨≤‡¨®‡≠Ä‡¨ï‡≠Ä‡≠ü',
  '2 Thessalonians': '‡≠® ‡¨•‡≠á‡¨∏‡¨≤‡¨®‡≠Ä‡¨ï‡≠Ä‡≠ü',
  '1 Timothy': '‡≠ß ‡¨§‡≠Ä‡¨Æ‡¨•‡¨ø‡≠ü',
  '2 Timothy': '‡≠® ‡¨§‡≠Ä‡¨Æ‡¨•‡¨ø‡≠ü',
  'Titus': '‡¨§‡≠Ä‡¨§‡¨∏',
  'Philemon': '‡¨´‡¨ø‡¨≤‡≠Ä‡¨Æ‡≠ã‡¨®',
  'Hebrews': '‡¨á‡¨¨‡≠ç‡¨∞‡≠Ä‡≠ü',
  'James': '‡¨Ø‡¨æ‡¨ï‡≠Å‡¨¨',
  '1 Peter': '‡≠ß ‡¨™‡¨ø‡¨§‡¨∞',
  '2 Peter': '‡≠® ‡¨™‡¨ø‡¨§‡¨∞',
  '1 John': '‡≠ß ‡¨Ø‡≠ã‡¨π‡¨®',
  '2 John': '‡≠® ‡¨Ø‡≠ã‡¨π‡¨®',
  '3 John': '‡≠© ‡¨Ø‡≠ã‡¨π‡¨®',
  'Jude': '‡¨Ø‡¨ø‡¨π‡≠Ç‡¨¶‡¨æ',
  'Revelation': '‡¨™‡≠ç‡¨∞‡¨ï‡¨æ‡¨∂‡¨ø‡¨§',
};

final Map<String, String> hindiTestamentNames = {
  'Old Testament': '‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§®‡§ø‡§Ø‡§Æ',
  'New Testament': '‡§®‡§Ø‡§æ ‡§®‡§ø‡§Ø‡§Æ',
};

final Map<String, String> odiaTestamentNames = {
  'Old Testament': '‡¨™‡≠Å‡¨∞‡¨æ‡¨§‡¨® ‡¨®‡¨ø‡≠ü‡¨Æ',
  'New Testament': '‡¨®‡≠Ç‡¨§‡¨® ‡¨®‡¨ø‡≠ü‡¨Æ',
};
bool _isEnglishLocal(String language) {
  final lang = language.trim().toLowerCase();
  return lang == 'english' || lang == 'en-english';
}

bool _isHindiLocal(String language) {
  final lang = language.trim().toLowerCase();
  return lang.startsWith('hi');
}

bool _isOdiaLocal(String language) {
  final lang = language.trim().toLowerCase();
  return lang.startsWith('or') || lang.startsWith('od');
}

bool _isLocal(String language) =>
    _isEnglishLocal(language) ||
    _isHindiLocal(language) ||
    _isOdiaLocal(language);

String _getLocalizedBookName(String bookName, String language) {
  if (_isHindiLocal(language)) {
    return hindiBookNames[bookName] ?? bookName;
  } else if (_isOdiaLocal(language)) {
    return odiaBookNames[bookName] ?? bookName;
  } else {
    return bookName;
  }
}

String _getLocalizedTestamentName(String testamentName, String language) {
  if (_isHindiLocal(language)) {
    return hindiTestamentNames[testamentName] ?? testamentName;
  } else if (_isOdiaLocal(language)) {
    return odiaTestamentNames[testamentName] ?? testamentName;
  } else {
    return testamentName;
  }
}
Future<List<String>> _loadBooksFromBundledJson(String language) async {
  try {
    final code = _isEnglishLocal(language)
        ? 'EN-English'
        : _isHindiLocal(language)
            ? 'HI-Hindi'
            : 'OD-Odia'; 

    debugPrint('üìö Loading $language books from $code/asv.json...');
    
    final ByteData data = await rootBundle.load('assets/bible/$code/asv.json');
    final List<dynamic> raw = json.decode(utf8.decode(data.buffer.asUint8List()));

    final books = raw.map((e) => e['book'] as String).toSet().toList()..sort();
    debugPrint('‚úÖ Loaded ${books.length} $language books from bundled JSON');
    return books;
  } catch (e) {
    debugPrint('‚ùå Error loading $language books from bundled JSON: $e');
    return [];
  }
}

class BibleBookListScreen extends ConsumerStatefulWidget {
  final String language;
  const BibleBookListScreen({super.key, required this.language});

  @override
  ConsumerState<BibleBookListScreen> createState() => _BibleBookListScreenState();
}

class _BibleBookListScreenState extends ConsumerState<BibleBookListScreen> {
  bool _isSearching = false;
  final _searchController = TextEditingController();
  final _searchFocusNode = FocusNode();
  final _scrollController = ScrollController();
  final _pageController = PageController();
  int _activeTestament = 0;
  List<String> _localBooks = [];
  bool _isLoadingLocal = false;

  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchChanged);
    _scrollController.addListener(_onScroll);
    _loadBooksData();
  }

  @override
  void dispose() {
    _searchController.dispose();
    _searchFocusNode.dispose();
    _scrollController.dispose();
    _pageController.dispose();
    super.dispose();
  }

  Future<void> _loadBooksData() async {
    setState(() => _isLoadingLocal = true);
    try {
      final books = await _loadBooksFromBundledJson(widget.language);
      if (mounted) {
        setState(() {
          _localBooks = books;
          _isLoadingLocal = false;
        });
      }
    } catch (e) {
      debugPrint('Error loading local books: $e');
      if (mounted) setState(() => _isLoadingLocal = false);
    }
  }

  void _onSearchChanged() {
    if (!mounted) return;
    setState(() {}); 
  }

  void _onScroll() {
  }

  void _toggleSearch() {
    HapticFeedback.lightImpact();
    if (!mounted) return;
    setState(() {
      _isSearching = !_isSearching;
      if (!_isSearching) {
        _searchController.clear();
        _searchFocusNode.unfocus();
      } else {
        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (mounted && _searchFocusNode.canRequestFocus) {
            _searchFocusNode.requestFocus();
          }
        });
      }
    });
  }

  void _onTestamentChanged(int testament) {
    HapticFeedback.selectionClick();
    if (_activeTestament != testament) {
      setState(() => _activeTestament = testament);
      _pageController.animateToPage(
        testament,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  void _onPageChanged(int page) {
    if (_activeTestament != page) {
      HapticFeedback.lightImpact();
      setState(() => _activeTestament = page);
    }
  }

  Future<void> _handleRefresh() async {
    HapticFeedback.lightImpact();
    await _loadBooksData();
  }

  Widget _buildBackgroundShapes() {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;
    
    return Stack(
      children: [
        Positioned(
          top: 80,
          right: -50,
          child: Opacity(
            opacity: isDark ? 0.08 : 0.04,
            child: Container(
              width: 150,
              height: 150,
              decoration: BoxDecoration(
                color: theme.colorScheme.secondary,
                borderRadius: const BorderRadius.only(
                  bottomLeft: Radius.circular(75),
                  topLeft: Radius.circular(75),
                ),
              ),
            ),
          ),
        ),
        Positioned(
          top: 200,
          left: -80,
          child: Opacity(
            opacity: isDark ? 0.06 : 0.03,
            child: Container(
              width: 200,
              height: 200,
              decoration: BoxDecoration(
                color: theme.colorScheme.primary,
                borderRadius: const BorderRadius.only(
                  topRight: Radius.circular(100),
                  bottomRight: Radius.circular(100),
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;
    
    final booksState = PaginationState<String>(
      items: _localBooks,
      isLoading: _isLoadingLocal,
      hasMore: false,
      isFromCache: true,
      error: null,
    );

    return PopScope(
      canPop: !_isSearching,
      onPopInvokedWithResult: (bool didPop, dynamic result) {
        if (!didPop && _isSearching && mounted) _toggleSearch();
      },
      child: Scaffold(
        backgroundColor: theme.colorScheme.surface,
        appBar: _buildAppBar(theme, isDark),
        body: Stack(
          children: [
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: isDark
                      ? [
                          const Color(0xFF0F172A),
                          const Color(0xFF1E293B),
                          const Color(0xFF334155),
                        ]
                      : [
                          const Color(0xFFE2E8F0),
                          const Color(0xFF94A3B8),
                          const Color(0xFF475569),
                        ],
                ),
              ),
            ),
            Positioned.fill(
              child: Opacity(
                opacity: isDark ? 0.12 : 0.06,
                child: Image.asset(
                  'assets/images/cross_light.jpg',
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) {
                    return Icon(
                      Icons.church,
                      size: 100,
                      color: theme.colorScheme.onSurface.withValues(alpha: 0.1),
                    );
                  },
                ),
              ),
            ),
            _buildBackgroundShapes(),
            Column(
              children: [
                if (_isSearching) _buildSearchBar(theme, isDark),
                _buildHeader(theme, isDark),
                _buildTestamentToggle(theme, isDark),
                Expanded(
                  child: _isSearching 
                    ? _buildSearchResults(booksState, theme, isDark) 
                    : _buildSwipeableBooksList(booksState, theme, isDark),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  AppBar _buildAppBar(ThemeData theme, bool isDark) {
    return AppBar(
      backgroundColor: Colors.transparent,
      elevation: 0,
      systemOverlayStyle: SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: isDark ? Brightness.light : Brightness.dark,
        statusBarBrightness: isDark ? Brightness.dark : Brightness.light,
      ),
      iconTheme: IconThemeData(
        color: isDark ? Colors.white : const Color(0xFF1F2937),
      ),
      actions: [
        IconButton(
          onPressed: _toggleSearch,
          icon: Icon(
            _isSearching ? Icons.close : Icons.search,
            color: isDark ? Colors.white : const Color(0xFF1F2937),
            size: 24,
          ),
          tooltip: _isSearching ? 'Close search' : 'Search books',
        ),
      ],
    );
  }

  Widget _buildSearchBar(ThemeData theme, bool isDark) {
    String searchHint;
    if (_isHindiLocal(widget.language)) {
      searchHint = '‡§ï‡§ø‡§§‡§æ‡§¨‡•á‡§Ç ‡§ñ‡•ã‡§ú‡•á‡§Ç...';
    } else if (_isOdiaLocal(widget.language)) {
      searchHint = '‡¨™‡≠Å‡¨∏‡≠ç‡¨§‡¨ï ‡¨ñ‡≠ã‡¨ú‡¨®‡≠ç‡¨§‡≠Å...';
    } else {
      searchHint = 'Search ${widget.language} books...';
    }

    return Container(
      padding: const EdgeInsets.all(16),
      child: TextField(
        controller: _searchController,
        focusNode: _searchFocusNode,
        style: GoogleFonts.inter(
          fontSize: 16,
          color: isDark ? Colors.white : const Color(0xFF1F2937),
          fontWeight: FontWeight.w500,
        ),
        decoration: InputDecoration(
          hintText: searchHint,
          hintStyle: GoogleFonts.inter(
            color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.6),
            fontWeight: FontWeight.w500,
          ),
          prefixIcon: Icon(
            Icons.search,
            color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.6),
            size: 20,
          ),
          suffixIcon: _searchController.text.isNotEmpty
              ? IconButton(
                  icon: Icon(
                    Icons.clear,
                    color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.6),
                    size: 20,
                  ),
                  onPressed: () {
                    HapticFeedback.lightImpact();
                    _searchController.clear();
                  },
                )
              : null,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(
              color: (isDark ? Colors.white : Colors.black).withValues(alpha: 0.2),
            ),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(
              color: (isDark ? Colors.white : Colors.black).withValues(alpha: 0.2),
            ),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(
              color: theme.colorScheme.primary,
              width: 2,
            ),
          ),
          filled: true,
          fillColor: (isDark ? Colors.white : Colors.black).withValues(alpha: 0.1),
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        ),
        textInputAction: TextInputAction.search,
      ),
    );
  }

  Widget _buildHeader(ThemeData theme, bool isDark) {
    String headerText;
    if (_isHindiLocal(widget.language)) {
      headerText = 'Dayasagar \nPraise and Worship';
    } else if (_isOdiaLocal(widget.language)) {
      headerText = 'Dayasagar \nPraise and Worship';
    } else {
      headerText = 'Dayasagar \nPraise and Worship';
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 20),
      child: Column(
        children: [
          Text(
            '',
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 16,
              fontWeight: FontWeight.w500,
              color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.7),
              letterSpacing: 2,
            ),
          ),
          const SizedBox(height: 16),
          Text(
            headerText,
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 32,
              fontWeight: FontWeight.w700,
              color: isDark ? Colors.white : const Color(0xFF1F2937),
              height: 1.2,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTestamentToggle(ThemeData theme, bool isDark) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
      decoration: BoxDecoration(
        color: (isDark ? Colors.white : Colors.black).withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        children: [
          Expanded(
            child: GestureDetector(
              onTap: () => _onTestamentChanged(0),
              child: Container(
                padding: const EdgeInsets.symmetric(vertical: 12),
                decoration: BoxDecoration(
                  color: _activeTestament == 0
                      ? (isDark ? Colors.white : Colors.black).withValues(alpha: 0.2)
                      : Colors.transparent,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  _getLocalizedTestamentName("Old Testament", widget.language),
                  textAlign: TextAlign.center,
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: _activeTestament == 0
                        ? (isDark ? Colors.white : const Color(0xFF1F2937))
                        : (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.6),
                  ),
                ),
              ),
            ),
          ),
          Expanded(
            child: GestureDetector(
              onTap: () => _onTestamentChanged(1),
              child: Container(
                padding: const EdgeInsets.symmetric(vertical: 12),
                decoration: BoxDecoration(
                  color: _activeTestament == 1
                      ? (isDark ? Colors.white : Colors.black).withValues(alpha: 0.2)
                      : Colors.transparent,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  _getLocalizedTestamentName("New Testament", widget.language),
                  textAlign: TextAlign.center,
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: _activeTestament == 1
                        ? (isDark ? Colors.white : const Color(0xFF1F2937))
                        : (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.6),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSwipeableBooksList(PaginationState<String> booksState, ThemeData theme, bool isDark) {
    final bookSet = booksState.items.toSet();
    
    if (booksState.items.isEmpty && booksState.isLoading) {
      return _buildLoadingState(theme, isDark);
    }
    if (booksState.items.isEmpty && !booksState.isLoading) {
      return _buildEmptyState(theme, isDark);
    }
    if (booksState.error != null) {
      return _buildErrorState(booksState.error!, theme, isDark);
    }

    return PageView(
      controller: _pageController,
      onPageChanged: _onPageChanged,
      children: [
        _buildTestamentBooksList(bookSet, 0, theme, isDark),
        _buildTestamentBooksList(bookSet, 1, theme, isDark),
      ],
    );
  }

  Widget _buildTestamentBooksList(Set<String> bookSet, int testament, ThemeData theme, bool isDark) {
    final books = _filteredBooksForTestament(bookSet, testament);

    if (books.isEmpty) {
      String noBookMessage;
      String swipeMessage;
      if (_isHindiLocal(widget.language)) {
        noBookMessage = "${testament == 0 ? '‡§™‡•Å‡§∞‡§æ‡§®‡•á' : '‡§®‡§è'} ‡§®‡§ø‡§Ø‡§Æ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§ï‡§ø‡§§‡§æ‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä";
        swipeMessage = "‚Üê ${testament == 0 ? '‡§®‡§è' : '‡§™‡•Å‡§∞‡§æ‡§®‡•á'} ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§µ‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç ‚Üí";
      } else if (_isOdiaLocal(widget.language)) {
        noBookMessage = "${testament == 0 ? '‡¨™‡≠Å‡¨∞‡¨æ‡¨§‡¨®' : '‡¨®‡≠Ç‡¨§‡¨®'} ‡¨®‡¨ø‡≠ü‡¨Æ‡¨∞‡≠á ‡¨ï‡≠å‡¨£‡¨∏‡¨ø ‡¨™‡≠Å‡¨∏‡≠ç‡¨§‡¨ï ‡¨Æ‡¨ø‡¨≥‡¨ø‡¨≤‡¨æ ‡¨®‡¨æ‡¨π‡¨ø‡¨Å";
        swipeMessage = "‚Üê ${testament == 0 ? '‡¨®‡≠Ç‡¨§‡¨®' : '‡¨™‡≠Å‡¨∞‡¨æ‡¨§‡¨®'} ‡¨®‡¨ø‡≠ü‡¨Æ ‡¨™‡¨æ‡¨á‡¨Å ‡¨∏‡≠ç‡≠±‡¨æ‡¨á‡¨™‡≠ç ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å ‚Üí";
      } else {
        noBookMessage = "No books found in ${testament == 0 ? 'Old' : 'New'} Testament";
        swipeMessage = "‚Üê Swipe to ${testament == 0 ? 'New' : 'Old'} Testament ‚Üí";
      }

      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.menu_book_outlined,
              size: 64,
              color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.5),
            ),
            const SizedBox(height: 16),
            Text(
              noBookMessage,
              textAlign: TextAlign.center,
              style: GoogleFonts.inter(
                fontSize: 18,
                fontWeight: FontWeight.w600,
                color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.7),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              swipeMessage,
              textAlign: TextAlign.center,
              style: GoogleFonts.inter(
                fontSize: 14,
                fontWeight: FontWeight.w500,
                color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.5),
              ),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: _handleRefresh,
      color: theme.colorScheme.primary,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 32),
        child: ListView.builder(
          controller: _scrollController,
          itemCount: books.length,
          itemBuilder: (context, index) => _buildBookButton(books[index], theme, isDark),
        ),
      ),
    );
  }

  Widget _buildSearchResults(PaginationState<String> booksState, ThemeData theme, bool isDark) {
    final query = _searchController.text.toLowerCase();
    if (query.isEmpty) {
      return _buildSearchEmptyState(theme, isDark);
    }
    
    final filteredBooks = _localBooks.where((book) {
      final localizedName = _getLocalizedBookName(book, widget.language);
      return localizedName.toLowerCase().contains(query);
    }).toSet();
    
    final books = _filteredBooks(filteredBooks);
    
    if (books.isEmpty) {
      return _buildSearchNoResultsState(theme, isDark);
    }
    
    return RefreshIndicator(
      onRefresh: _handleRefresh,
      color: theme.colorScheme.primary,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 32),
        child: ListView.builder(
          itemCount: books.length,
          itemBuilder: (context, index) => _buildBookButton(books[index], theme, isDark),
        ),
      ),
    );
  }
  Widget _buildBookButton(String bookName, ThemeData theme, bool isDark) {
    String displayName;
    if (_isHindiLocal(widget.language)) {
      displayName = hindiBookNames[bookName] ?? bookName; 
    } else if (_isOdiaLocal(widget.language)) {
      displayName = odiaBookNames[bookName] ?? bookName; 
    } else {
      displayName = bookName; 
    }

    return Container(
      width: double.infinity,
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: (isDark ? Colors.white : Colors.black).withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: (isDark ? Colors.white : Colors.black).withValues(alpha: 0.1),
          width: 1,
        ),
      ),
      child: Material(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(16),
        child: InkWell(
          borderRadius: BorderRadius.circular(16),
          onTap: () {
            HapticFeedback.selectionClick();
            if (mounted) context.push('/bible/${widget.language}/$bookName/chapters');
          },
          child: Padding(
            padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
            child: Text(
              displayName, 
              textAlign: TextAlign.center,
              style: GoogleFonts.inter(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: isDark ? Colors.white : const Color(0xFF1F2937),
              ),
            ),
          ),
        ),
      ),
    );
  }

  List<String> _filteredBooks(Set<String> sourceSet) {
    final refList = _activeTestament == 0 ? oldTestamentBooksOrdered : newTestamentBooksOrdered;
    return refList.where((b) => sourceSet.contains(b)).toList();
  }

  List<String> _filteredBooksForTestament(Set<String> sourceSet, int testament) {
    final refList = testament == 0 ? oldTestamentBooksOrdered : newTestamentBooksOrdered;
    return refList.where((b) => sourceSet.contains(b)).toList();
  }

  Widget _buildSearchEmptyState(ThemeData theme, bool isDark) {
    String searchPrompt;
    if (_isHindiLocal(widget.language)) {
      searchPrompt = '‡§¨‡§æ‡§á‡§¨‡§≤ ‡§ï‡•Ä ‡§ï‡§ø‡§§‡§æ‡§¨‡•á‡§Ç ‡§ñ‡•ã‡§ú‡•á‡§Ç';
    } else if (_isOdiaLocal(widget.language)) {
      searchPrompt = '‡¨¨‡¨æ‡¨á‡¨¨‡¨≤ ‡¨™‡≠Å‡¨∏‡≠ç‡¨§‡¨ï ‡¨ñ‡≠ã‡¨ú‡¨®‡≠ç‡¨§‡≠Å';
    } else {
      searchPrompt = 'Search ${widget.language} Bible books';
    }

    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.search,
            size: 64,
            color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.5),
          ),
          const SizedBox(height: 16),
          Text(
            searchPrompt,
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.7),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchNoResultsState(ThemeData theme, bool isDark) {
    String noResultsMessage;
    if (_isHindiLocal(widget.language)) {
      noResultsMessage = '‡§ï‡•ã‡§à ‡§ï‡§ø‡§§‡§æ‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä';
    } else if (_isOdiaLocal(widget.language)) {
      noResultsMessage = '‡¨ï‡≠å‡¨£‡¨∏‡¨ø ‡¨™‡≠Å‡¨∏‡≠ç‡¨§‡¨ï ‡¨Æ‡¨ø‡¨≥‡¨ø‡¨≤‡¨æ ‡¨®‡¨æ‡¨π‡¨ø‡¨Å';
    } else {
      noResultsMessage = 'No books found';
    }

    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.search_off,
            size: 64,
            color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.5),
          ),
          const SizedBox(height: 16),
          Text(
            noResultsMessage,
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.7),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadingState(ThemeData theme, bool isDark) {
    String loadingMessage;
    if (_isHindiLocal(widget.language)) {
      loadingMessage = '‡§ï‡§ø‡§§‡§æ‡§¨‡•á‡§Ç ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç...';
    } else if (_isOdiaLocal(widget.language)) {
      loadingMessage = '‡¨™‡≠Å‡¨∏‡≠ç‡¨§‡¨ï ‡¨≤‡≠ã‡¨°‡≠ç ‡¨π‡≠á‡¨â‡¨õ‡¨ø...';
    } else {
      loadingMessage = 'Loading books...';
    }

    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(color: theme.colorScheme.primary),
          const SizedBox(height: 16),
          Text(
            loadingMessage,
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 16,
              fontWeight: FontWeight.w500,
              color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.7),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState(ThemeData theme, bool isDark) {
    String emptyMessage;
    String reloadText;
    if (_isHindiLocal(widget.language)) {
      emptyMessage = '‡§ï‡•ã‡§à ‡§ï‡§ø‡§§‡§æ‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä';
      reloadText = '‡§°‡•á‡§ü‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç';
    } else if (_isOdiaLocal(widget.language)) {
      emptyMessage = '‡¨ï‡≠å‡¨£‡¨∏‡¨ø ‡¨™‡≠Å‡¨∏‡≠ç‡¨§‡¨ï ‡¨Æ‡¨ø‡¨≥‡¨ø‡¨≤‡¨æ ‡¨®‡¨æ‡¨π‡¨ø‡¨Å';
      reloadText = '‡¨°‡¨æ‡¨ü‡¨æ ‡¨™‡≠Å‡¨®‡¨É‡¨≤‡≠ã‡¨° ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å';
    } else {
      emptyMessage = 'No books found';
      reloadText = 'Reload Data';
    }

    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.book_outlined,
            size: 64,
            color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.5),
          ),
          const SizedBox(height: 16),
          Text(
            emptyMessage,
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.7),
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () {
              HapticFeedback.mediumImpact();
              _handleRefresh();
            },
            child: Text(reloadText),
          ),
        ],
      ),
    );
  }

  Widget _buildErrorState(String error, ThemeData theme, bool isDark) {
    String errorTitle;
    String retryText;
    String goBackText;
    if (_isHindiLocal(widget.language)) {
      errorTitle = '‡§ï‡§ø‡§§‡§æ‡§¨‡•á‡§Ç ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø';
      retryText = '‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏';
      goBackText = '‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç';
    } else if (_isOdiaLocal(widget.language)) {
      errorTitle = '‡¨™‡≠Å‡¨∏‡≠ç‡¨§‡¨ï ‡¨≤‡≠ã‡¨°‡≠ç ‡¨ï‡¨∞‡¨ø‡¨¨‡¨æ‡¨∞‡≠á ‡¨§‡≠ç‡¨∞‡≠Å‡¨ü‡¨ø';
      retryText = '‡¨™‡≠Å‡¨®‡¨É‡¨ö‡≠á‡¨∑‡≠ç‡¨ü‡¨æ';
      goBackText = '‡¨´‡≠á‡¨∞‡¨ø‡¨Ø‡¨æ‡¨Ü‡¨®‡≠ç‡¨§‡≠Å';
    } else {
      errorTitle = 'Error loading books';
      retryText = 'Retry';
      goBackText = 'Go Back';
    }

    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.error_outline,
            size: 64,
            color: theme.colorScheme.error,
          ),
          const SizedBox(height: 16),
          Text(
            errorTitle,
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.7),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            error,
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 14,
              color: (isDark ? Colors.white : const Color(0xFF1F2937)).withValues(alpha: 0.6),
            ),
          ),
          const SizedBox(height: 24),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () {
                  HapticFeedback.mediumImpact();
                  _handleRefresh();
                },
                child: Text(retryText),
              ),
              const SizedBox(width: 16),
              OutlinedButton(
                onPressed: () {
                  HapticFeedback.lightImpact();
                  Navigator.of(context).pop();
                },
                child: Text(goBackText),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
